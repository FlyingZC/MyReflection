重要
com.zc.exer.T02Reflection.java,所有反射api

160808
反射.在程序中访问已经加载到JVM中的Java对象的描述.实现访问,检测,修改描述Java对象本身信息的功能
java.lang.reflection

所有类的对象都是Class的实例

反射一定要定义一个无参构造方法，不然报错
java.lang.InstantiationException: Reflect.Person

类的生命周期

在一个类编译完成之后，下一步就需要开始使用类，如果要使用一个类，肯定离不开JVM。
在程序执行中JVM通过装载，链接，初始化这3个步骤完成。
1.加载
类的装载是通过类加载器完成的，加载器将.class文件的二进制文件装入JVM的方法区，
并且在堆区创建描述这个类的java.lang.Class对象。用来封装数据。 但是同一个类只会被类装载器装载一次

2.链接
链接就是把二进制数据组装为可以运行的状态。
链接分为校验，准备，解析这3个阶段

校验一般用来确认此二进制文件是否适合当前的JVM（版本），

准备就是为静态成员分配内存空间，并设置默认值

解析指的是转换常量池中的代码作为直接引用的过程，
直到所有的符号引用都可以被运行程序使用（建立完整的对应关系）,
解析这个类创建的对其他类的所有引用

3.初始化
若该类具有超类,则对其初始化,执行静态初始化器 和 静态初始化块

完成之后，类型也就完成了初始化，初始化之后类的对象就可以正常使用了，直到一个对象不再使用之后，将被垃圾回收。释放空间。
当没有任何引用指向Class对象时就会被卸载，结束类的生命周期

-----------------------
Class类用于描述运行时类的信息.Class对象在 加载类 时 由虚拟机通过类加载器中的
defineClass方法自动构造.可描述基本类型

getDeclaredMethod()与getMethod()区别
getMethod():获取public修饰的方法,包括从父类中集成的方法
getDeclaredMethod():获取本类中所有方法(不包括父类)

Accessible:是指是否进行安全监测.由于取消安全检查,则也可以运行private方法了

160920
Type 是 Java 编程语言中所有类型的公共高级接口。它们包括原始类型、参数化类型、数组类型、类型变量和基本类型。 
所有已知子接口： 
GenericArrayType数组类型, 
ParameterizedType表示参数化类型, 
TypeVariable<D>, 
WildcardType 

所有已知实现类： 
Class 


getDeclaredField是可以获取一个类的所有字段. 
getField只能获取类的public 字段. 

----------------
ThinkingInJava
ClassInitialization
debug看   类的延迟初始化过程
